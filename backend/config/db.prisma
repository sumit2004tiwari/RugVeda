// ---------------------------------------------------------
// Prisma - Postgres - Single Vendor Carpet E-commerce
// ---------------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------- Enums ------------------------------

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum OrderStatus {
  PENDING
  PAID
  CONFIRMED
  PACKED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURN_REQUESTED
  RETURN_APPROVED
  RETURN_REJECTED
  RETURNED
  REFUND_INITIATED
  REFUNDED
}

enum PaymentStatus {
  INITIATED
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIAL_REFUNDED
}

enum NotificationLevel {
  INFO
  WARNING
  ERROR
}

enum SenderType {
  USER
  VENDOR
  SYSTEM
}

enum TaxType {
  NONE
  GST_INCLUDED
  GST_ADDITIONAL
}

enum InventoryAction {
  ADJUSTMENT
  PURCHASE       // inward (procurement)
  SALE           // outward (order)
  RETURN_IN      // customer return -> inward
  CANCEL_RESTORE // order cancel -> inward
  RESERVE        // reserve for COD if needed
  RELEASE        // release reservation
}

enum ShipmentStatus {
  CREATED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURN_TO_ORIGIN
  CANCELLED
}

// -------------------- Core / Accounts --------------------

model User {
  id               String             @id @default(uuid()) @db.Uuid
  fullName         String             @db.VarChar(255)
  email            String             @unique @db.VarChar(320)
  passwordHash     String?            @db.VarChar(255) // nullable for social login
  phone            String?            @unique @db.VarChar(20)
  isEmailVerified  Boolean            @default(false)
  isPhoneVerified  Boolean            @default(false)
  role             String             @default("CUSTOMER") @db.VarChar(30) // future roles if needed
  addresses        Address[]
  cart             Cart?
  orders           Order[]
  authProviders    AuthProvider[]
  couponRedemptions CouponRedemption[]
  chats            Chat[]
  notifications    Notification[]
  wishlists        Wishlist[]
  sentMessages     ChatMessage[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isDeleted        Boolean            @default(false)
  deletedAt        DateTime?

  @@map("users")
  @@index([email])
  @@index([phone])
}

model AuthProvider {
  id               String   @id @default(uuid()) @db.Uuid
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String   @db.Uuid
  provider         String   @db.VarChar(50)
  providerUserId   String   @db.VarChar(255)
  meta             Json?
  createdAt        DateTime @default(now())

  @@unique([provider, providerUserId])
  @@map("auth_providers")
}

// -------------------- Single Vendor / Store ---------------

/// Single-vendor setup: isme sirf 1 active row rakhein.
/// Future me multi-vendor chahiye to `unique where isActive=true` hata sakte ho.
model Vendor {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @db.VarChar(255)
  email     String?   @unique @db.VarChar(320)
  phone     String?   @unique @db.VarChar(20)
  config    Json?     @default("{}") // branding, GSTIN, pickup address, Razorpay/Stripe keys (securely load env in app)
  chats     Chat[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)

  @@map("vendors")
  @@index([isActive])
}

// -------------------- Catalog -----------------------------

model Category {
  id        String     @id @default(uuid()) @db.Uuid
  name      String     @db.VarChar(150)
  slug      String     @unique @db.VarChar(200)
  parentId  String?    @db.Uuid
  parent    Category?  @relation("CategoryToParent", fields: [parentId], references: [id], onDelete: SetNull)
  children  Category[] @relation("CategoryToParent")
  position  Int        @default(0)
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())

  products  ProductCategory[]

  @@map("categories")
  @@index([slug])
}

model Product {
  id              String            @id @default(uuid()) @db.Uuid
  sku             String?           @unique @db.VarChar(100)
  name            String            @db.VarChar(300)
  slug            String            @unique @db.VarChar(300)
  description     String?
  price           Decimal           @db.Decimal(12, 2)
  currency        String            @default("INR") @db.VarChar(10)
  isActive        Boolean           @default(true)
  // Cached stock; authoritative history lives in InventoryTransaction
  stockQuantity   Int               @default(0)
  weightKg        Decimal?          @db.Decimal(8, 3) // normalized to KG
  lengthCm        Decimal?          @db.Decimal(8, 2)
  widthCm         Decimal?          @db.Decimal(8, 2)
  thicknessMm     Decimal?          @db.Decimal(8, 2)
  material        String?           @db.VarChar(120) // e.g., Wool, Cotton, Jute
  color           String?           @db.VarChar(80)
  pattern         String?           @db.VarChar(120) // e.g., Persian, Modern, Geometric
  origin          String?           @db.VarChar(120) // e.g., Jaipur, Bhadohi
  taxType         TaxType           @default(GST_INCLUDED)
  gstRate         Decimal?          @db.Decimal(5, 2) // e.g., 5.00, 12.00
  metadata        Json?             @default("{}")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isDeleted       Boolean           @default(false)
  deletedAt       DateTime?

  variants        ProductVariant[]
  images          ProductImage[]
  categories      ProductCategory[]
  orderItems      OrderItem[]
  inventoryTxns   InventoryTransaction[]
  cartItems       CartItem[]
  wishlists       Wishlist[]

  @@map("products")
  @@index([slug])
  @@index([isActive])
  @@index([material])
  @@index([color])
  @@index([origin])
  // TIP: For Postgres full-text search, create a GIN index via SQL migration on name/description.
}

model ProductVariant {
  id              String    @id @default(uuid()) @db.Uuid
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String    @db.Uuid
  sku             String?   @unique @db.VarChar(150)
  variantName     String?   @db.VarChar(200) // e.g., Size: 4x6 ft
  additionalPrice Decimal    @default(0) @db.Decimal(12, 2)
  stockQuantity   Int        @default(0)
  // Dimensions can differ per variant:
  lengthCm        Decimal?   @db.Decimal(8, 2)
  widthCm         Decimal?   @db.Decimal(8, 2)
  metadata        Json?      @default("{}")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  images          ProductImage[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  inventoryTxns   InventoryTransaction[]

  @@map("product_variants")
  @@index([productId])
}

model ProductImage {
  id         String          @id @default(uuid()) @db.Uuid
  product    Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String          @db.Uuid
  variant    ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  variantId  String?         @db.Uuid
  url        String
  alt        String?
  position   Int             @default(0)

  @@map("product_images")
  @@index([productId, position])
}

model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String   @db.Uuid
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @db.Uuid

  @@id([productId, categoryId])
  @@map("product_categories")
}

// -------------------- Addresses ---------------------------

model Address {
  id         String   @id @default(uuid()) @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.Uuid
  fullName   String?  @db.VarChar(255)
  line1      String   @db.VarChar(400)
  line2      String?  @db.VarChar(400)
  city       String   @db.VarChar(150)
  state      String?  @db.VarChar(150)
  country    String   @db.VarChar(100) @default("India")
  postalCode String   @db.VarChar(30)
  phone      String?  @db.VarChar(20)
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())

  shippingOrders Order[] @relation("shipping_address")
  billingOrders  Order[] @relation("billing_address")

  @@map("addresses")
  @@index([userId, isDefault])
}

// -------------------- Cart & Wishlist ---------------------

model Cart {
  id        String     @id @default(uuid()) @db.Uuid
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique @db.Uuid
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
  @@index([userId])
}

model CartItem {
  id         String           @id @default(uuid()) @db.Uuid
  cart       Cart             @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId     String           @db.Uuid
  product    Product          @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId  String           @db.Uuid
  variant    ProductVariant?  @relation(fields: [variantId], references: [id], onDelete: SetNull)
  variantId  String?          @db.Uuid
  quantity   Int              @default(1)
  unitPrice  Decimal          @db.Decimal(12, 2) // snapshot at time of adding to cart
  createdAt  DateTime         @default(now())

  @@unique([cartId, productId, variantId])
  @@map("cart_items")
  @@index([productId])
}

model Wishlist {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.Uuid
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlists")
  @@index([userId])
}

// -------------------- Coupons -----------------------------

model Coupon {
  id                 String     @id @default(uuid()) @db.Uuid
  code               String     @unique @db.VarChar(100)
  description        String?
  discountType       DiscountType
  discountValue      Decimal    @db.Decimal(12, 2)
  maxDiscountAmount  Decimal?   @db.Decimal(12, 2)
  minOrderAmount     Decimal    @default(0) @db.Decimal(12, 2)
  startsAt           DateTime?
  endsAt             DateTime?
  usageLimit         Int?
  perUserLimit       Int        @default(1)
  isFirstOrderOnly   Boolean    @default(false)
  isActive           Boolean    @default(true)
  createdAt          DateTime   @default(now())

  redemptions        CouponRedemption[]
  orders             Order[]    @relation("order_coupon")

  @@map("coupons")
  @@index([code])
  @@index([isActive, startsAt, endsAt])
}

model CouponRedemption {
  id         String   @id @default(uuid()) @db.Uuid
  coupon     Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  couponId   String   @db.Uuid
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?  @db.Uuid
  order      Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId    String?  @db.Uuid
  redeemedAt DateTime @default(now())

  @@map("coupon_redemptions")
  @@index([couponId, userId])
}

// -------------------- Orders / Payments -------------------

model Order {
  id                 String       @id @default(uuid()) @db.Uuid
  user               User         @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId             String       @db.Uuid
  orderNumber        String       @unique @db.VarChar(50)
  status             OrderStatus  @default(PENDING)
  shippingAddress    Address?     @relation("shipping_address", fields: [shippingAddressId], references: [id], onDelete: SetNull)
  shippingAddressId  String?      @db.Uuid
  billingAddress     Address?     @relation("billing_address", fields: [billingAddressId], references: [id], onDelete: SetNull)
  billingAddressId   String?      @db.Uuid

  currency           String       @default("INR") @db.VarChar(10)
  subtotal           Decimal      @db.Decimal(12, 2)
  shippingAmount     Decimal      @default(0) @db.Decimal(12, 2)
  discountAmount     Decimal      @default(0) @db.Decimal(12, 2)
  taxAmount          Decimal      @default(0) @db.Decimal(12, 2)
  totalAmount        Decimal      @db.Decimal(12, 2)
  // GST summary (optional snapshot)
  gstRateApplied     Decimal?     @db.Decimal(5, 2)
  gstAmount          Decimal?     @db.Decimal(12, 2)

  coupon             Coupon?      @relation("order_coupon", fields: [couponId], references: [id], onDelete: SetNull)
  couponId           String?      @db.Uuid

  placedAt           DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  isDeleted          Boolean      @default(false)
  deletedAt          DateTime?

  items              OrderItem[]
  payments           Payment[]
  shipments          Shipment[]
  returns            ReturnRequest[]
  couponRedemptions  CouponRedemption[]

  @@map("orders")
  @@index([userId])
  @@index([status, placedAt])
}

model OrderItem {
  id           String          @id @default(uuid()) @db.Uuid
  order        Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String          @db.Uuid
  product      Product         @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId    String          @db.Uuid
  variant      ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  variantId    String?         @db.Uuid
  quantity     Int
  unitPrice    Decimal         @db.Decimal(12, 2)
  taxRate      Decimal?        @db.Decimal(5, 2)
  taxAmount    Decimal?        @db.Decimal(12, 2)
  discount     Decimal?        @db.Decimal(12, 2)
  totalPrice   Decimal         @db.Decimal(12, 2) // unitPrice*qty + tax - discount snapshot

  returnItems  ReturnItem[]

  @@map("order_items")
  @@index([orderId])
  @@index([productId])
}

model Payment {
  id                 String        @id @default(uuid()) @db.Uuid
  order              Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId            String        @db.Uuid
  provider           String        @db.VarChar(50) // e.g., RAZORPAY, STRIPE
  providerPaymentId  String?       @db.VarChar(255)
  providerOrderId    String?       @db.VarChar(255) // Razorpay order id, etc.
  amount             Decimal       @db.Decimal(12, 2)
  currency           String        @default("INR") @db.VarChar(10)
  status             PaymentStatus
  paymentMethod      Json?         // card, upi, netbanking snapshot
  paidAt             DateTime?
  createdAt          DateTime      @default(now())

  refunds            Refund[]

  @@map("payments")
  @@index([orderId])
  @@index([status])
}

model Refund {
  id             String    @id @default(uuid()) @db.Uuid
  payment        Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId      String    @db.Uuid
  amount         Decimal   @db.Decimal(12, 2)
  reason         String?   @db.VarChar(300)
  providerRefundId String? @db.VarChar(255)
  createdAt      DateTime  @default(now())

  @@map("refunds")
  @@index([paymentId])
}

// -------------------- Shipping / Returns ------------------

model Shipment {
  id              String        @id @default(uuid()) @db.Uuid
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String        @db.Uuid
  carrier         String?       @db.VarChar(100) // Bluedart, Delhivery, DTDC...
  service         String?       @db.VarChar(100) // surface/air
  trackingNumber  String?       @db.VarChar(120)
  status          ShipmentStatus @default(CREATED)
  shippedAt       DateTime?
  deliveredAt     DateTime?
  eta             DateTime?
  meta            Json?
  createdAt       DateTime      @default(now())

  @@map("shipments")
  @@index([orderId])
  @@index([trackingNumber])
}

model ReturnRequest {
  id           String      @id @default(uuid()) @db.Uuid
  order        Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String      @db.Uuid
  reason       String?     @db.VarChar(300)
  status       OrderStatus @default(RETURN_REQUESTED) // constrained to return-related statuses
  requestedAt  DateTime    @default(now())
  approvedAt   DateTime?
  resolvedAt   DateTime?
  meta         Json?

  items        ReturnItem[]

  @@map("return_requests")
  @@index([orderId, status])
}

model ReturnItem {
  id           String          @id @default(uuid()) @db.Uuid
  return       ReturnRequest   @relation(fields: [returnId], references: [id], onDelete: Cascade)
  returnId     String          @db.Uuid
  orderItem    OrderItem       @relation(fields: [orderItemId], references: [id], onDelete: Restrict)
  orderItemId  String          @db.Uuid
  quantity     Int
  refundAmount Decimal?        @db.Decimal(12, 2)

  @@map("return_items")
  @@unique([returnId, orderItemId])
}

// -------------------- Inventory (Authoritative Ledger) ----

model InventoryTransaction {
  id           String          @id @default(uuid()) @db.Uuid
  product      Product?        @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId    String?         @db.Uuid
  variant      ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  variantId    String?         @db.Uuid
  action       InventoryAction
  quantity     Int             // +ve for inward, -ve for outward
  reason       String?         @db.VarChar(200)
  referenceId  String?         @db.Uuid // orderId/returnId/csv-import batch id
  createdAt    DateTime        @default(now())
  meta         Json?

  @@map("inventory_transactions")
  @@index([productId])
  @@index([variantId])
  @@index([action, createdAt])
}

// -------------------- Notifications / Chat / Audit --------

model Notification {
  id         String            @id @default(uuid()) @db.Uuid
  user       User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?           @db.Uuid
  vendorRead Boolean           @default(false)
  title      String            @db.VarChar(255)
  body       String?
  meta       Json?
  level      NotificationLevel @default(INFO)
  createdAt  DateTime          @default(now())
  isRead     Boolean           @default(false)

  @@map("notifications")
  @@index([userId, isRead])
}

model Chat {
  id        String      @id @default(uuid()) @db.Uuid
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @db.Uuid
  vendor    Vendor?     @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  vendorId  String?     @db.Uuid
  subject   String?
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())

  messages  ChatMessage[]

  @@map("chats")
  @@index([userId, isActive])
}

model ChatMessage {
  id          String     @id @default(uuid()) @db.Uuid
  chat        Chat       @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId      String     @db.Uuid
  senderType  SenderType
  senderUser  User?      @relation(fields: [senderUserId], references: [id], onDelete: SetNull)
  senderUserId String?   @db.Uuid
  message     String
  attachments Json?
  createdAt   DateTime   @default(now())
  isRead      Boolean    @default(false)

  @@map("chat_messages")
  @@index([chatId])
}

model AuditLog {
  id          String   @id @default(uuid()) @db.Uuid
  entityType  String   @db.VarChar(100)
  entityId    String?  @db.Uuid
  action      String   @db.VarChar(50) // CREATE/UPDATE/DELETE/LOGIN etc.
  performedBy String?  @db.Uuid        // userId/adminId
  performedAt DateTime @default(now())
  changes     Json?

  @@map("audit_logs")
  @@index([entityType, entityId])
  @@index([performedAt])
}
